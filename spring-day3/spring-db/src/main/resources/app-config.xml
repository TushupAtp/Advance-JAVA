<?xml version="1.0" encoding="UTF-8"?>
<beans 
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

 	<context:component-scan base-package="com.cdac.component" />

	<!-- DataSource configuration -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName" value="com.mysql.cj.jdbc.Driver" />
  		<property name="url" value="jdbc:mysql://localhost:3306/training" />
  		<property name="username" value="root" />
  		<property name="password" value="root" />
  		<property name="initialSize" value="1" />
  	</bean>
  	
  	<!-- Hibernate/JPA integration configuration -->
  	<!-- This bean entry will create the EntityManagerFactory object for us
  		which is required when using Hibernate/JPA
  		Also there is no need of separate META-INF/persistence.xml file
  		As all the required ORM specific settings can be done here itself
  		within this bean configuration -->
  	<bean id="myEmf" 
	  class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
	    <property name="dataSource" ref="dataSource" /> <!-- DataSource reference -->
	    <property name="packagesToScan" value="com.cdac.component" /> <!-- Location of @Entity classes -->
	    <property name="jpaVendorAdapter">
	        <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
	    </property>
	    <property name="jpaProperties">
	        <props>
	            <!-- Assuming tables are already present, 
	            	I am not going to ask Hibernate to create the required tables
	             <prop key="hibernate.hbm2ddl.auto">update</prop> -->
	            <prop key="hibernate.show_sql">true</prop>
	        </props>
	    </property>
	</bean>
	
	<!-- This bean will enable support for transactions in our code
		We don't have to manually begin/commit/rollback -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
    	<property name="entityManagerFactory" ref="myEmf" />
	</bean>

	<tx:annotation-driven />

</beans>